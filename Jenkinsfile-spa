library 'deployment-library'

pipeline {
    agent {
        node {
            label 'worker-ng'
        }
    }
    options {
        timestamps()
    }
    parameters {
        choice(
            name: 'CI_GIT_TYPE',
            choices: ['', 'branch', 'commit', 'tag'],
            description: 'Which Environment?'
        )
        string(
            name: 'CI_GIT_SOURCE',
            defaultValue: '',
            description: 'Which git source?'
        )
    }
    environment {
        VAULT_TOKEN = credentials('vault_secret_token')
        VAULT_ADDR = "https://vault-internal.sinbad.web.id"
        SINBAD_REPO = "${env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')}"
        AWS_CREDENTIAL = 'automation_aws_ng'
        SINBAD_ENV = "${env.JOB_BASE_NAME}"
        BUCKET_PREFIX = getMFS3Bucket(SINBAD_REPO)
        WORKSPACE = "${env.WORKSPACE}"
        SINBAD_ENV_MF = getMFenvPath(SINBAD_REPO)
        DISTRIBUTION_ID = getMFDistributionID(SINBAD_ENV, SINBAD_REPO)
        ENV_BUCKET = "${SINBAD_ENV == 'development' ? 'dev' : "${SINBAD_ENV}" }"
        BUCKET_UPLOAD = "${BUCKET_PREFIX}"+"${ENV_BUCKET}"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    if(params.CI_GIT_TYPE != '' || params.CI_GIT_SOURCE != '') {
                        if(params.CI_GIT_TYPE == 'branch' || params.CI_GIT_TYPE == ''){
                            def scmVars = checkout([
                                $class: 'GitSCM',
                                branches: [[name: "refs/remotes/origin/${params.CI_GIT_SOURCE}"]],
                                doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                                extensions: scm.extensions,
                                userRemoteConfigs: scm.userRemoteConfigs
                            ])
                        } else if(params.CI_GIT_TYPE == 'commit') {
                            def scmVars = checkout([
                                $class: 'GitSCM',
                                branches: [[name: "${params.CI_GIT_SOURCE}"]],
                                doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                                extensions: scm.extensions,
                                userRemoteConfigs: scm.userRemoteConfigs
                            ])
                        } else if(params.CI_GIT_TYPE == 'tag') {
                            def scmVars = checkout([
                                $class: 'GitSCM',
                                branches: [[name: "refs/tags/${params.CI_GIT_SOURCE}"]],
                                doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                                extensions: scm.extensions,
                                userRemoteConfigs: scm.userRemoteConfigs
                            ])
                        }
                    }
                    GIT_MESSAGE = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD | tr -d '\n'")
                    GIT_COMMIT_SHORT = sh(returnStdout: true, script: "git rev-parse --short=8 ${GIT_COMMIT}").trim()
                    GIT_AUTHOR = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${GIT_COMMIT}").trim()
                    GIT_TAG = sh(returnStdout: true, script: "git describe --tags").trim()
                }
            }
        }

        stage('Download ENV') {
            steps {
                script{
                    if (SINBAD_ENV == 'production') {
                    }
                    sh "vault kv get -format=json ${SINBAD_ENV}/${SINBAD_REPO} | jq -r .data.data.env > .env"
                    sh "vault kv get -format=json ${SINBAD_ENV}/${SINBAD_REPO} | jq -r .data.data.environment > src/environments/environment.ts"
                    sh "vault kv get -format=json ${SINBAD_ENV}/${SINBAD_REPO} | jq -r .data.data.angularjson > angular.json"
                    sh "vault kv get -format=json ${SINBAD_ENV}/${SINBAD_REPO} | jq -r .data.data.tsconfigappjson > tsconfig.app.json"
                    sh "sed -i 's/GIT_TAG/${GIT_TAG}/g' .env"
                    sh "sed -i 's/GIT_COMMIT_SHORT/${GIT_COMMIT_SHORT}/g' .env"
                }
            }
        }

        stage('Install') {
            steps {
                sh "npm ci"
            }
        }

        stage('Build') {
            steps {
                script{
                  sh "npm run build:single-spa-production"
                }
            }
        }
//         stage('Code Analysis') {
//             when { expression { SINBAD_ENV != "production" || SINBAD_ENV != "demo" } }
//             steps{
//                 script{
//                     catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
//                         try{
//                             def scannerHome = tool 'SonarQubeScanner';
//                             withSonarQubeEnv('sonarqube-sinbad') {
//                                 sh "${scannerHome}/bin/sonar-scanner"
//                             }
//                         }catch (Exception e) {
//                             echo 'Exception occurred: ' + e.toString()
//                             sh "exit 1"
//                         }
//                     }
//                 }
//             }
//         }
        stage('Deploy') {
            steps {
                script {
                    withAWS(credentials: "${AWS_CREDENTIAL}") {
                        s3Upload(bucket:"${BUCKET_UPLOAD}", workingDir:'dist', includePathPattern:'**/*')
                        if (SINBAD_REPO == 'ssc-rootconfig-singlespa' || SINBAD_REPO == 'ap-rootconfig-singlespa') {
                            s3Upload(bucket:"${BUCKET_UPLOAD}", workingDir:"${WORKSPACE}", includePathPattern:'importmap.json')
                        }
                    }
                }
            }
        }
        stage('run Invalidation'){
            steps {
                script {
                    withAWS(credentials: "${AWS_CREDENTIAL}") {
                        cfInvalidate(distribution:"${DISTRIBUTION_ID}", paths:['/*'], waitForCompletion: true)
                    }
                }
            }
        }
    }
    post {
        always {
            // junit '**/target/*.xml'
            slackSend color: '#8cff00', message: "${SINBAD_REPO} (${SINBAD_ENV}) -> ${GIT_MESSAGE} by <${GIT_AUTHOR}>", channel: "#jenkins"
        }
        failure {
            slackSend color: '#ff0000', message: "(FAILED) ${SINBAD_REPO} (${SINBAD_ENV}) -> ${GIT_MESSAGE} by <${GIT_AUTHOR}>", channel: "#jenkins"
        }
    }
}
